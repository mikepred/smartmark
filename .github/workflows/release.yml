name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm test

  build-extension:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create extension package
      run: |
        # Create a clean directory for the extension
        mkdir smartmark-extension
        
        # Copy essential files
        cp manifest.json smartmark-extension/
        cp background.js smartmark-extension/
        cp content.js smartmark-extension/
        cp popup.html smartmark-extension/
        cp popup.js smartmark-extension/
        cp settings.html smartmark-extension/
        cp settings.js smartmark-extension/
        cp -r icons smartmark-extension/
        cp -r utils smartmark-extension/
        cp LICENSE smartmark-extension/
        cp README.md smartmark-extension/
        
        # Create zip file
        cd smartmark-extension
        zip -r ../smartmark-${{ github.ref_name }}.zip .
        cd ..

    - name: Upload extension artifact
      uses: actions/upload-artifact@v3
      with:
        name: smartmark-extension
        path: smartmark-${{ github.ref_name }}.zip

  create-release:
    runs-on: ubuntu-latest
    needs: build-extension
    permissions:
      contents: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download extension artifact
      uses: actions/download-artifact@v3
      with:
        name: smartmark-extension

    - name: Get version from tag
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: SmartMark v${{ env.VERSION }}
        body: |
          ## SmartMark v${{ env.VERSION }}
          
          ### Features
          - AI-powered bookmark classification using Google Gemini
          - Support for multiple AI providers (Gemini, LM Studio, Ollama)
          - Intelligent folder hierarchy creation (up to 3 levels)
          - Secure API key storage and validation
          - Comprehensive error handling and fallback options
          
          ### Installation
          1. Download the `smartmark-v${{ env.VERSION }}.zip` file
          2. Extract the contents
          3. Open Chrome and go to `chrome://extensions/`
          4. Enable "Developer mode"
          5. Click "Load unpacked" and select the extracted folder
          6. Configure your AI provider in the extension settings
          
          ### Requirements
          - Google Chrome browser
          - Google Gemini API key (or compatible AI service)
          
          ### What's Changed
          See the commit history for detailed changes in this release.
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/v${{ env.PREVIOUS_VERSION }}...${{ github.ref_name }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./smartmark-${{ github.ref_name }}.zip
        asset_name: smartmark-${{ github.ref_name }}.zip
        asset_content_type: application/zip
